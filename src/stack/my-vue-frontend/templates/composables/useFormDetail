import { onMounted, computed, reactive, ref, watch } from 'vue'
import { useVuelidate } from "@vuelidate/core";
import { required, helpers, minValue } from "@vuelidate/validators";
import useHttp from "@/composables/useHttp";
<% tableDetailsCurrent.tableForeignKeysAssoc.forEach(function(field){
%>import <%= fn.uCamelCase(fn.singular(field.foreign_table_name)) %>Service from "../../services/<%= fn.uCamelCase(fn.singular(field.foreign_table_name)) %>";
<% });
%>import type { <%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %> } from "../../types/<%= pathModule %>/<%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %>";

export default (<%= fn.singular(tableDetailsCurrent.tableName) %>: <%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %>) => {  
  const form = reactive<<%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %>>({<%
    tableDetailsCurrent.tableStructure.filter(
        f => !['created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: <%= fn.singular(tableDetailsCurrent.tableName) %>.<%= field.column_name; %>, %><% }); %>
  })

  const {
    errors,
    pending,

    getError
  } = useHttp()

  const isOpenModal = ref(false)
  <% tableDetailsCurrent.tableForeignKeysAssoc.forEach(function(field){
  %>const <%= field.foreign_table_name %> = ref([])
  <% }); %>
  const rules = computed(() => {
    return {<%
      tableDetailsCurrent.tableStructure.filter(
          f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
      ).forEach(function(field){ %>
      <%= field.column_name; %>: { required: helpers.withMessage("Campo requerido", required) },<% }); %>
    };
  });

  const v$ = useVuelidate(rules, form as any);
    
  watch(<%= fn.singular(tableDetailsCurrent.tableName) %>, (new<%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %>) => {<%
    tableDetailsCurrent.tableStructure.filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    form.<%= field.column_name; %> = new<%= fn.uCamelCase(fn.singular(tableDetailsCurrent.tableName)) %>.<%= field.column_name; %><% }); %>
  })

  onMounted(() => {
    <% tableDetailsCurrent.tableForeignKeysAssoc.forEach(function(tbl){
      %>
      pending.value = true
      <%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>Service.getHelp<%= fn.uCamelCase(tbl.foreign_table_name); %>()
        .then((response) => {
          <%= tbl.foreign_table_name; %>.value = response.data
         })
         .catch((err) => {
           errors.value = getError(err)
         })
         .finally(() => {
           pending.value = false
         })<% }); %>
    })

  return {
    <% tableDetailsCurrent.tableForeignKeysAssoc.forEach(function(field){
    %><%= field.foreign_table_name %>,
    <% });
    %>form,
    
    v$ 
  }
}
