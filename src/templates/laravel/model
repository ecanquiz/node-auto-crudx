<?php

namespace Modules\<%= pathModule; %>\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;

class <%= fn.uCamelCase(fn.singular(tableMaster)); %> extends Model
{
    use HasFactory, SoftDeletes;

    protected $connection = 'pgsql_<%= pathModule.toLowerCase(); %>';

    protected $fillable = [<% tableStructure.forEach(function(field, index) {
      if  (fn.v.excludeFields(field.column_name)) {%>
        '<%- field.column_name; %>'<%= fn.addCommaToArr(tableStructure, index, 4) -%>
    <%}});%> 
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ /* 'field_name' => 'field_type' */ ];
    <% if (tableMasterForeignKeysAssoc.length) { %>
    protected $with = [<% tableMasterForeignKeysAssoc.forEach(function(tbl, index){
    %>'<%= fn.singular(tbl.foreign_table_name); %>'<%= index < tableMasterForeignKeysAssoc.length-1 ? ',' : '' %><%
    }); %>];
    <%}%>
    <% tableMasterForeignKeysAssoc.forEach(function(tbl){
    %>public function <%= fn.singular(tbl.foreign_table_name); %>()
    {
        return $this->belongsTo(\Modules\<%= pathModule; %>\Entities\<%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>::class);
    } 
    <%}); -%>
    <% tableDetailOfMaster.forEach(function(table){ %>
    public function <%= table.tableName; %>()
    {        
        return $this->hasMany(\Modules\<%= pathModule; %>\Entities\<%= fn.uCamelCase(fn.singular(table.tableName)); %>::class);
    }
    <% }); %>
    protected static function newFactory()
    {
        return \Modules\<%= pathModule; %>\Database\Factories\<%= fn.uCamelCase(fn.singular(tableMaster)); %>Factory::new();
    }
}
