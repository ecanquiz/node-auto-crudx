import { onMounted, reactive, ref, computed } from 'vue'
import useHttp from "@/composables/useHttp";
import { useVuelidate } from "@vuelidate/core";
import { required, helpers } from "@vuelidate/validators";
import <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service from "../../services/<%= fn.uCamelCase(fn.singular(tableMaster)); %>"
<% tableForeignKeysAssoc.forEach(function(tbl){
%>import <%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>Service from  "../../services/<%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>"<%
}); %>
import type { <%= fn.uCamelCase(fn.singular(tableMaster)); %> } from "../../types/<%= fn.uCamelCase(fn.singular(tableMaster)); %>"
<% tableForeignKeysAssoc.forEach(function(tbl){
%>import type { <%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %> } from  "../../types/<%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>"<%
}); %>
// import { ascBubble } from "@/utils/helpers";

export default (<%= fn.singular(tableMaster); %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>) => {
  <% tableForeignKeysAssoc.forEach(function(tbl){
    %>const <%= tbl.foreign_table_name; %> =  ref<<%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>[]>()<%
  }); %>

  const form = reactive({<%
    tableStructure.filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: <%= fn.singular(tableMaster); %>.<%= field.column_name; %>, %><% }); %>
  })

  const {
    errors,
    pending,

    getError
  } = useHttp()

  onMounted(() => {









    <% tableForeignKeysAssoc.forEach(function(tbl){
      %>
      pending.value = true
      <%= fn.uCamelCase(fn.singular(tbl.foreign_table_name)); %>Service.getHelp<%= fn.uCamelCase(tbl.foreign_table_name); %>()
        .then((response) => {
          <%= tbl.foreign_table_name; %>.value = response.data
         })
         .catch((err) => {
           errors.value = getError(err)
         })
         .finally(() => {
           pending.value = false
         })<% }); %>











    /*pending.value = true
    CategoryService.getCategoriesSelect()
      .then((response) => {
        categories.value = response.data.map(function (c) {
          return {
            id: c.id,
            name: c.family
          }
        }).sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })

    pending.value = true
    MarkService.getMarksSelect()
      .then((response) => {
        marks.value = response.data.sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })

    pending.value = true
    CommonService.getMeasureUnitTypes()
      .then((response) => {
        measureUnitTypes.value = response.data.map(function (mut) {
          return {
            id: mut.id,
            name: mut.description
          }
        }).sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false;
      })*/
  })

  const rules = computed(() => {
    return {<%
      tableStructure.filter(
        f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
      ).forEach(function(field, index){ %>
      <%= field.column_name; %>: {
        required: helpers.withMessage("Campo requerido", required),
      },<% }); %>
    }
  })

  const v$ = useVuelidate(rules, form);

  return {
  <% tableForeignKeysAssoc.forEach(function(tbl){ -%>
  <%- tbl.foreign_table_name -%>,
<%})-%>
    form,
    errors,
    pending,

    v$      
  }
}
