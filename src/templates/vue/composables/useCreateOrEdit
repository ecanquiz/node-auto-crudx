import { onMounted, reactive, ref } from 'vue'
import { useRouter } from 'vue-router'
import useHttp from "@/composables/useHttp";
import <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service from "../../services/<%= fn.uCamelCase(fn.singular(tableMaster)); %>"
<% tableMasterForeignKeysAssoc.forEach(function(tbl){
%>import <%= tbl.foreignTableNameSingularUCamelCase; %>Service from  "../../services/<%= tbl.foreignTableNameSingularUCamelCase; %>"<%
}); %>
import type { <%= fn.uCamelCase(fn.singular(tableMaster)); %> } from "../../types/<%= fn.uCamelCase(fn.singular(tableMaster)); %>"
<% tableMasterForeignKeysAssoc.forEach(function(tbl){
%>import type { <%= tbl.foreignTableNameSingularUCamelCase; %> } from  "../../types/<%= tbl.foreignTableNameSingularUCamelCase; %>"<%
}); %>

export default (<%= tableMasterSingular; %>Id?: string) => {
  const router = useRouter();
  
  const <%= tableMasterSingular; %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %> = reactive({<%
    tableStructure.filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: "", %><% }); %>
  })

  <% tableMasterForeignKeysAssoc.forEach(function(tbl){
  %>const <%= tbl.foreign_table_name; %> = ref<<%= tbl.foreignTableNameSingularUCamelCase; %>[]>()<%
  }); %>
  
  const {  
    errors,
    pending,

    getError
  } = useHttp()
  
  onMounted(async () => {
    if (<%= tableMasterSingular; %>Id) {
      pending.value = true
      <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.get<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= tableMasterSingular; %>Id)
        .then((response) => { <% tableStructure.filter(
            f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
          ).forEach(function(field){ %>
          <%= tableMasterSingular; %>.<%= field.column_name; %> = response.data.data.<%= field.column_name; %> %><% }); %>
        })
        .catch((err) => {        
          errors.value = getError(err)
        })
        .finally(() => {
          pending.value = false;
        })
    }    
    <% tableMasterForeignKeysAssoc.forEach(function(tbl){
    %>
    pending.value = true
    <%= tbl.foreignTableNameSingularUCamelCase; %>Service.getHelp<%= tbl.foreignTableNameUCamelCase; %>()
      .then((response) => {
        <%= tbl.foreign_table_name; %>.value = response.data
       })
       .catch((err) => {
         errors.value = getError(err)
       })
       .finally(() => {
         pending.value = false
       })<% }); %>
  })

  const insert<%= fn.uCamelCase(fn.singular(tableMaster)); %> = async (<%= tableMasterSingular; %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>) => {  
    pending.value = true
    return <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.insert<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= tableMasterSingular; %>)
      .then((response) => {         
        alert( response.data.message )
        router.push( { path: '/<%= tableMaster; %>' } )
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }

  const update<%= fn.uCamelCase(fn.singular(tableMaster)); %> = async (<%= tableMasterSingular; %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>, <%= tableMasterSingular; %>Id: string) => {
    pending.value= true
    return <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.update<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= tableMasterSingular; %>Id, <%= tableMasterSingular; %>)
      .then((response) => {
        alert( response.data.message )
        router.push( { path: '/<%= tableMaster; %>' } )
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }
  
  const submit = (<%= tableMasterSingular; %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>, <%= tableMasterSingular