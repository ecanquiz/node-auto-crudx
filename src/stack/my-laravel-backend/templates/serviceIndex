<?php

namespace Modules\<%= pathModule; %>\Http\Services\<%= fn.uCamelCase(fn.singular(tableMaster)); %>;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use Modules\<%= pathModule; %>\Entities\<%= fn.uCamelCase(fn.singular(tableMaster)); %>;

class Index<%= fn.uCamelCase(fn.singular(tableMaster)); %>Service
{

  /**
   * Display a listing of the resource.
   */
  static public function execute(Request $request): JsonResponse
  {
      /* Initialize query */
        $query = <%= fn.uCamelCase(fn.singular(tableMaster)); %>::query();

        /* search */
        $search = strtolower($request->input("search"));
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                <%
                let where='where';
                tableStructure.forEach(function(field) {
                    if  (fn.v.noIdAndExcludeFields(field.column_name)
                        && field.data_type !== 'boolean'
                        && !tableForeignKeysAssoc.map(r=>r.column_name).includes(field.column_name)
                    ) { 
                %>-><%= where; %>(\DB::raw('lower(<%= field.column_name; %>)') , "like", "%$search%")                
                <%
                    where='orWhere';
                    }
                });
                %>;
            });
        }

        /* sort */
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $<%= tableMaster; %> = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $<%= tableMaster; %>,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);

  }  

}
