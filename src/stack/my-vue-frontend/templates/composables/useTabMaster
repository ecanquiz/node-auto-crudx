import { onMounted, reactive } from 'vue'
import { useRouter } from 'vue-router'
import useHttp from "@/composables/useHttp";
import <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service from "@/modules/<%= pathModule; %>/services/<%= fn.uCamelCase(fn.singular(tableMaster)); %>";
import type { <%= fn.uCamelCase(fn.singular(tableMaster)); %> } from "../../types/<%= fn.uCamelCase(fn.singular(tableMaster)); %>";

export default (<%= fn.singular(tableMaster); %>Id?: string) => {
  const router = useRouter();    

  const <%= fn.singular(tableMaster); %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %> = reactive({<%
    tableStructure.filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: "", %><% }); %>
  })

  const {  
    errors,
    pending,

    getError
  } = useHttp()
  
  onMounted(() => {
    if (<%= fn.singular(tableMaster); %>Id) {
      pending.value = true
      <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.get<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= fn.singular(tableMaster); %>Id)
        .then((response) => { <% tableStructure.filter(
            f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
          ).forEach(function(field){ %>
          <%= fn.singular(tableMaster); %>.<%= field.column_name; %> = response.data.data.<%= field.column_name; %> %><% }); %>
        })
        .catch((err) => {        
          errors.value = getError(err)
        })
        .finally(() => {
          pending.value = false;
        })
    }    
  })

  const insert<%= fn.uCamelCase(fn.singular(tableMaster)); %> = async (<%= fn.singular(tableMaster); %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>) => {
    pending.value = true
    return <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.insert<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= fn.singular(tableMaster); %>)
      .then((response) => {         
        alert( response.data.message )
        router.push( { path: `/<%= tableMaster; %>/edit/${response.data.id}` } )
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }

  const update<%= fn.uCamelCase(fn.singular(tableMaster)); %> = async (<%= fn.singular(tableMaster); %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>, <%= fn.singular(tableMaster); %>Id: string) => {
    pending.value= true
    <%= fn.singular(tableMaster); %>._method = 'PUT'
    return <%= fn.uCamelCase(fn.singular(tableMaster)); %>Service.update<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= fn.singular(tableMaster); %>Id, <%= fn.singular(tableMaster); %>)
      .then((response) => {
        alert( response.data.message )
        //router.push( { path: '/<%= tableMaster; %>' } )
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }
  
  const submit = (<%= fn.singular(tableMaster); %>: <%= fn.uCamelCase(fn.singular(tableMaster)); %>) => {
    !<%= fn.singular(tableMaster); %>Id ? insert<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= fn.singular(tableMaster); %>) : update<%= fn.uCamelCase(fn.singular(tableMaster)); %>(<%= fn.singular(tableMaster); %>, <%= fn.singular(tableMaster); %>Id)
  }

  return {    
    <%= fn.singular(tableMaster); %>,
    errors,
    pending,

    submit
  }
}
