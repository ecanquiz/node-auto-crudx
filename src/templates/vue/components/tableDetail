<script setup lang="ts">
import { toRaw, ref } from "vue"
//import <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service from "@/modules/<%= pathModule %>/services/<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)); %>"
import type { <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)); %> } from "../../types/<%= pathModule %>/<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)); %>";

const props = defineProps<{ <%= tableDetailCurrent.tableName; %>: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)); %>[] }>()

const emits = defineEmits<{
  (e: 'edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>', <%= fn.singular(tableDetailCurrent.tableName); %>Id: object): void
  (e: 'remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>', <%= fn.singular(tableDetailCurrent.tableName); %>Id: string): void
  (e: 'get<%= fn.uCamelCase(tableDetailCurrent.tableName); %>' ): void
}>()

const edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> =  (<%= fn.singular(tableDetailCurrent.tableName); %>: object) => {
  emits("edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>", toRaw(<%= fn.singular(tableDetailCurrent.tableName); %>))
};

const remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> =  (<%= fn.singular(tableDetailCurrent.tableName); %>Id: string) => {
  emits("remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>", <%= fn.singular(tableDetailCurrent.tableName); %>Id)
};

const <%= fn.singular(tableDetailCurrent.tableName); %>Id = ref("")

</script>

<template>
  <div class="mt-4 relative overflow-x-auto shadow-md sm:rounded-lg">
    <table id="id_tab_presentacion" class="w-full text-sm text-left text-gray-500 dark:text-gray-400" width="100%">
      <thead class="text-xs text-gray-700 uppercase dark:text-gray-400">
        <tr>
          <%
          tableDetailCurrent.tableStructureOfDetails[0].filter(
            f => ![tableDetailCurrent.idForeignKey, 'id','created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
          ).forEach(function(field, index){ %>
          <th class="px-6 py-3 <% if (index%2===0) { %>bg-gray-50 bg-base-200<% } %>"><%= field.column_name; %></th>%><% 
          }); %>
          <th class="px-6 py-3 <% if (tableDetailCurrent.tableStructureOfDetails[0].filter(
            f => ![tableDetailCurrent.idForeignKey, 'id','created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
          ).length%2===0) { %>bg-gray-50 bg-base-200<% } %>">Acci√≥n(es)</th>
        </tr>
      </thead>
      <tbody>      
        <tr v-for="<%= fn.singular(tableDetailCurrent.tableName); %> in props.<%= tableDetailCurrent.tableName; %>" :key="<%= fn.singular(tableDetailCurrent.tableName); %>.id">



          <% tableDetailCurrent.tableStructureOfDetails[0].filter(
            f => ![tableDetailCurrent.idForeignKey, 'id','created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
          ).forEach((field, index) => { %>
            <td class="px-6 py-3 <% if (index%2===0) { %>bg-gray-50 bg-base-200<% } %>">
              {{ <%= fn.singular(tableDetailCurrent.tableName); %>.<%= field.column_name; %> }}


              

            </td>
           <% }); %>



          <!--td class="px-6 py-3 bg-gray-50 bg-base-200">{{<%= fn.singular(tableDetailCurrent.tableName); %>.bar_cod}}</td>
          <td class="px-6 py-3">{{<%= fn.singular(tableDetailCurrent.tableName); %>.int_cod}}</td>
          <td class="px-6 py-3 text-right">{{<%= fn.singular(tableDetailCurrent.tableName); %>.price}}</td>
          <td class="px-6 py-3 bg-gray-50 bg-base-200 text-right">{{<%= fn.singular(tableDetailCurrent.tableName); %>.stock_min}}</td>
          <td class="px-6 py-3 text-right">{{<%= fn.singular(tableDetailCurrent.tableName); %>.stock_max}}</td>
          <td class="px-6 py-3 bg-gray-50 bg-base-200">{{<%= fn.singular(tableDetailCurrent.tableName); %>.status}}</td-->  
          <td class="px-6 py-3">
            <div class="flex items-center space-x-1">
             <AppBtn
                class="btn btn-primary btn-xs"                    
                @click="edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(<%= fn.singular(tableDetailCurrent.tableName); %>)"
              >
                Editar
              </AppBtn>
              <AppBtn
                @click="remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(<%= fn.singular(tableDetailCurrent.tableName); %>.id)"                    
                class="btn btn-danger btn-xs"                    
              >
                Eliminar
              </AppBtn>
            </div>
          </td>

        </tr>
      </tbody>
    </table>    
  </div>  
</template>
