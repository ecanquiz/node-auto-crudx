import { computed, reactive, ref, watch } from 'vue'
import { useVuelidate } from "@vuelidate/core";
import { required, helpers, minValue } from "@vuelidate/validators";
import type { <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> } from "../../types/<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>";

export default (<%= fn.singular(tableDetailCurrent.tableName) %>: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>) => {  
  const form = reactive<<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>>({<%
    tableDetailCurrent.tableStructureOfDetails[0].filter(
        f => !['created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: <%= fn.singular(tableDetailCurrent.tableName) %>.<%= field.column_name; %>, %><% }); %>
  })

  const isOpenModal = ref(false)

  const rules = computed(() => {
    return {<%
      tableDetailCurrent.tableStructureOfDetails[0].filter(
          f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
      ).forEach(function(field){ %>
      <%= field.column_name; %>: { required: helpers.withMessage("Campo requerido", required) },<% }); %>
    };
  });

  const v$ = useVuelidate(rules, form);
    
  watch(<%= fn.singular(tableDetailCurrent.tableName) %>, (new<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>) => {<%
    tableDetailCurrent.tableStructureOfDetails[0].filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    form.<%= field.column_name; %> = new<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>.<%= field.column_name; %><% }); %>
  })

  return {
    form,
    
    v$ 
  }
}
