import { computed, onMounted, reactive, ref } from 'vue'
import useHttp from "@/composables/useHttp";
import <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service from "@/modules/<%= pathModule %>/services/<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>";
import type { Ref } from "vue";
import type { <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> } from "../../types/<%= pathModule %>/<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>";

export default (<%= fn.singular(tableMaster); %>Id: string) => {
  /*const saleTypeOptions = [
    { label: 'Mayor', value: 0 },
    { label: 'Detal', value: 1 }  
  ]
  const statusOptions = [
    { label: 'Inactivo', value: 0 },
    { label: 'Activo', value: 1 }  
  ]*/
  
  const <%= fn.singular(tableDetailCurrent.tableName); %>: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)); %> = reactive({<%
  tableDetailCurrent.tableStructureOfDetails[0].filter(
      f => !['created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: "", %><% }); %>
  })
  
  const <%= tableDetailCurrent.tableName %>: Ref<<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>[]>  = ref([])
  const panelOpened = ref(false)
  const closeButtonOpened = computed(()=> panelOpened.value ? "Cerrar" : "Abrir")
  const closeClassOpened = computed(()=> panelOpened.value ? "btn-default" : "btn-primary")

  const {  
    errors,
    pending,

    getError
  } = useHttp()

  onMounted(    
    () => {
      <%= fn.singular(tableDetailCurrent.tableName) %>.<%= fn.singular(tableMaster); %>_id = <%= fn.singular(tableMaster); %>Id
      get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>()
    }
  )

  const panelToogle<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = ()=> {
    if (!panelOpened.value) {
      create<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>()
    }
    panelOpened.value =! panelOpened.value    
  }
  
  const get<%= fn.uCamelCase(tableDetailCurrent.tableName) %> = async () => {
    if (!<%= fn.singular(tableMaster); %>Id)
      return null 
    pending.value = true
    <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service.get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>(<%= fn.singular(tableMaster); %>Id)
      .then(res => <%= tableDetailCurrent.tableName %>.value = res.data)
      .catch(err => errors.value = getError(err))
      .finally(() => pending.value = false) 
  }

  const insert<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = async (payload: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>) => {
    pending.value = true
    payload.<%= fn.singular(tableMaster); %>_id = <%= fn.singular(tableMaster); %>Id
    return <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service.insert<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(payload)
      .then((response) => {
        panelOpened.value = false
        get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>()    
        alert( response.data.message )
              
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }

  const update<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = async (payload: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>, <%= fn.singular(tableDetailCurrent.tableName) %>Id: string) => {
    pending.value = true
    payload.<%= fn.singular(tableMaster); %>_id = <%= fn.singular(tableMaster); %>Id
    payload._method = 'PUT'        
    return <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service.update<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(payload, <%= fn.singular(tableDetailCurrent.tableName) %>Id)
      .then((response) => {        
        panelOpened.value = false
        get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>()    
        alert( response.data.message )     
      })
      .catch((err) => {                
        console.log( err.response.data )
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })
  }
  
  const submit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = (payload: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>) => {    
    !<%= fn.singular(tableDetailCurrent.tableName) %>.id ? insert<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> (payload)  : update<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(payload, <%= fn.singular(tableDetailCurrent.tableName) %>.id)
  }

  const create<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = () => {
      <%= fn.singular(tableDetailCurrent.tableName); %>.<%= tableDetailCurrent.idForeignKey; %> = <%= fn.singular(tableMaster); %>Id<%
    tableDetailCurrent.tableStructureOfDetails[0].filter(
        f => fn.v.excludeFields(f.column_name) && f.column_name !== tableDetailCurrent.idForeignKey
      ).forEach(function(field){ %>
      <%= fn.singular(tableDetailCurrent.tableName); %>.<%= field.column_name; %> = ""<% }); %>
  }

  const edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = (<%= fn.singular(tableDetailCurrent.tableName) %>Edit: <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>) => {
    // presentation.status = presentationEdit.sale_type ? 1 : 0
    <%= fn.singular(tableDetailCurrent.tableName); %>.<%= tableDetailCurrent.idForeignKey; %> = <%= fn.singular(tableMaster); %>Id<%
  tableDetailCurrent.tableStructureOfDetails[0].filter(
      f => fn.v.excludeFields(f.column_name) && f.column_name !== tableDetailCurrent.idForeignKey
    ).forEach(function(field){ %>
    <%= fn.singular(tableDetailCurrent.tableName); %>.<%= field.column_name; %> = <%= fn.singular(tableDetailCurrent.tableName) %>Edit.<%= field.column_name; %>%><% }); %>
    panelOpened.value = true
  }
  
  const remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %> = async (<%= fn.singular(tableDetailCurrent.tableName) %>Id: string) => {
    if (<%= fn.singular(tableDetailCurrent.tableName) %>Id === undefined)
      return
    else if (confirm(`¿Estás seguro que desea eliminar el registro ${<%= fn.singular(tableDetailCurrent.tableName) %>Id}?`)) {  
      pending.value = true    
      return <%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>Service.delete<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>(<%= fn.singular(tableDetailCurrent.tableName) %>Id)
        .then((response) => {        
          get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>()
        })
        .catch((err) => {                
          console.log( err.response.data )
          errors.value = getError(err)
        })
        .finally(() => {
          pending.value = false
        })
    }
  }

  return {
    panelOpened,
    closeButtonOpened,
    closeClassOpened,
    <%= tableDetailCurrent.tableName %>,
    <%= fn.singular(tableDetailCurrent.tableName) %>,
    /*saleTypeOptions,
    statusOptions,*/

    create<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>,
    edit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>,
    get<%= fn.uCamelCase(tableDetailCurrent.tableName) %>,
    remove<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>, 
    submit<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>,
    panelToogle<%= fn.uCamelCase(fn.singular(tableDetailCurrent.tableName)) %>
  }
}
