import { onMounted, reactive, ref, computed } from 'vue'
import useHttp from "@/composables/useHttp";
// import { ascBubble } from "@/utils/helpers";
import { useVuelidate } from "@vuelidate/core";
import { required, helpers } from "@vuelidate/validators";
//import * as CategoryService from "@/modules/Product/services/CategoryService";
//import * as MarkService from "@/modules/Product/services/MarkService";
//import * as CommonService from "@/modules/Product/services/CommonService";
import type {
  <%= tableMasterSingularUCamelCase; %>,
  //Category,
  //Mark,
  //MeasureUnit,
  //MeasureUnitType
} from "../../types/<%= tableMasterSingularUCamelCase; %>";

export default (<%= tableMasterSingular; %>: <%= tableMasterSingularUCamelCase; %>) => {
  //const categories = ref<Category[]>()
  //const marks = ref<Mark[]>()
  //const measureUnitTypes = ref<MeasureUnitType[]>()
  //const measureUnits = ref<MeasureUnit[]>()

  const form = reactive({<%
    tableStructure.filter(
      f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
    ).forEach(function(field){ %>
    <%= field.column_name; %>: <%= tableMasterSingular; %>.<%= field.column_name; %>, %><% }); %>
  })

  const {
    errors,
    pending,

    getError
  } = useHttp()

  onMounted(() => {
    /*pending.value = true
    CategoryService.getCategoriesSelect()
      .then((response) => {
        categories.value = response.data.map(function (c) {
          return {
            id: c.id,
            name: c.family
          }
        }).sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })

    pending.value = true
    MarkService.getMarksSelect()
      .then((response) => {
        marks.value = response.data.sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false
      })

    pending.value = true
    CommonService.getMeasureUnitTypes()
      .then((response) => {
        measureUnitTypes.value = response.data.map(function (mut) {
          return {
            id: mut.id,
            name: mut.description
          }
        }).sort(ascBubble)
      })
      .catch((err) => {
        errors.value = getError(err)
      })
      .finally(() => {
        pending.value = false;
      })*/
  })

  const rules = computed(() => {
    return {<%
      tableStructure.filter(
        f => !['id', 'created_at', 'updated_at', 'deleted_at'].includes(f.column_name)
      ).forEach(function(field, index){ %>
      <%= field.column_name; %>: {
        required: helpers.withMessage("Campo requerido", required),
      },<% }); %>
    }
  })

  const v$ = useVuelidate(rules, form);

  return {
//    categories,
//    marks,
//    measureUnitTypes,
//    measureUnits,
    form,
    errors,
    pending,

    v$      
  }
}
